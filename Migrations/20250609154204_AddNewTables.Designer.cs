// <auto-generated />
using System;
using ConstructionOrganizations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConstructionOrganizations.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250609154204_AddNewTables")]
    partial class AddNewTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConstructionOrganizations.Models.Brigade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Brigades");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.BrigadeMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BrigadeId")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrigadeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("BrigadeMembers");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.BrigadeWorkAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("BrigadeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WorkScheduleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrigadeId");

                    b.HasIndex("WorkScheduleId");

                    b.ToTable("BrigadeWorkAssignments");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.ConstructionDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.ConstructionOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.ConstructionProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ManagementId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("PositionId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.EmployeeAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("EmployeeAssignments");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.EmployeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("EquipmentCount")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ManagementId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.EquipmentAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("integer");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("ObjectId");

                    b.ToTable("EquipmentAssignments");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.MaterialEstimate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("MaterialCount")
                        .HasColumnType("bigint");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.ToTable("MaterialEstimates");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.MaterialUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("MaterialCount")
                        .HasColumnType("bigint");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkScheduleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.HasIndex("WorkScheduleId");

                    b.ToTable("MaterialUsages");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.Object", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConstructionProjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ObjectType")
                        .HasColumnType("integer");

                    b.Property<int>("ObjectTypeNavigationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConstructionProjectId");

                    b.HasIndex("ObjectTypeNavigationId");

                    b.ToTable("Objects");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.ObjectAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("AttributeValue")
                        .HasColumnType("bigint");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.ToTable("ObjectAttributes");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.ObjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ObjectTypes");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.WorkSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PlannedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PlannedStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WorkTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("WorkSchedules");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.WorkType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WorkTypes");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.BrigadeMember", b =>
                {
                    b.HasOne("ConstructionOrganizations.Models.Brigade", "Brigade")
                        .WithMany("Members")
                        .HasForeignKey("BrigadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstructionOrganizations.Models.Employee", "Employee")
                        .WithMany("BrigadeMemberships")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brigade");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.BrigadeWorkAssignment", b =>
                {
                    b.HasOne("ConstructionOrganizations.Models.Brigade", "Brigade")
                        .WithMany("Assignments")
                        .HasForeignKey("BrigadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstructionOrganizations.Models.WorkSchedule", "WorkSchedule")
                        .WithMany("BrigadeAssignments")
                        .HasForeignKey("WorkScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brigade");

                    b.Navigation("WorkSchedule");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.ConstructionDepartment", b =>
                {
                    b.HasOne("ConstructionOrganizations.Models.ConstructionOrganization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.ConstructionProject", b =>
                {
                    b.HasOne("ConstructionOrganizations.Models.ConstructionDepartment", "Department")
                        .WithMany("Projects")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.Employee", b =>
                {
                    b.HasOne("ConstructionOrganizations.Models.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstructionOrganizations.Models.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeType");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.EmployeeAssignment", b =>
                {
                    b.HasOne("ConstructionOrganizations.Models.Employee", "Employee")
                        .WithMany("EmployeeAssignments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstructionOrganizations.Models.ConstructionProject", "Project")
                        .WithMany("EmployeeAssignments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.Equipment", b =>
                {
                    b.HasOne("ConstructionOrganizations.Models.ConstructionDepartment", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.EquipmentAssignment", b =>
                {
                    b.HasOne("ConstructionOrganizations.Models.Equipment", "Equipment")
                        .WithMany("Assignments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstructionOrganizations.Models.Object", "Object")
                        .WithMany("EquipmentAssignments")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Object");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.MaterialEstimate", b =>
                {
                    b.HasOne("ConstructionOrganizations.Models.Object", "Object")
                        .WithMany("MaterialEstimates")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.MaterialUsage", b =>
                {
                    b.HasOne("ConstructionOrganizations.Models.Object", "Object")
                        .WithMany("MaterialUsages")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstructionOrganizations.Models.WorkSchedule", "WorkSchedule")
                        .WithMany("MaterialUsages")
                        .HasForeignKey("WorkScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Object");

                    b.Navigation("WorkSchedule");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.Object", b =>
                {
                    b.HasOne("ConstructionOrganizations.Models.ConstructionProject", "Project")
                        .WithMany("Objects")
                        .HasForeignKey("ConstructionProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstructionOrganizations.Models.ObjectType", "ObjectTypeNavigation")
                        .WithMany("Objects")
                        .HasForeignKey("ObjectTypeNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ObjectTypeNavigation");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.ObjectAttribute", b =>
                {
                    b.HasOne("ConstructionOrganizations.Models.Object", "Object")
                        .WithMany("Attributes")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.WorkSchedule", b =>
                {
                    b.HasOne("ConstructionOrganizations.Models.Object", "Object")
                        .WithMany("WorkSchedules")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstructionOrganizations.Models.WorkType", "WorkType")
                        .WithMany("WorkSchedules")
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Object");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.Brigade", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.ConstructionDepartment", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.ConstructionProject", b =>
                {
                    b.Navigation("EmployeeAssignments");

                    b.Navigation("Objects");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.Employee", b =>
                {
                    b.Navigation("BrigadeMemberships");

                    b.Navigation("EmployeeAssignments");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.Equipment", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.Object", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("EquipmentAssignments");

                    b.Navigation("MaterialEstimates");

                    b.Navigation("MaterialUsages");

                    b.Navigation("WorkSchedules");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.ObjectType", b =>
                {
                    b.Navigation("Objects");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.Position", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.WorkSchedule", b =>
                {
                    b.Navigation("BrigadeAssignments");

                    b.Navigation("MaterialUsages");
                });

            modelBuilder.Entity("ConstructionOrganizations.Models.WorkType", b =>
                {
                    b.Navigation("WorkSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
